#!/bin/bash
# Deploy Author-Integrated CloudFlare Worker
# Implements Tasks 8 & 9: Author Indexing and Cultural Data Propagation

set -e

echo "üöÄ DEPLOYING AUTHOR-INTEGRATED CLOUDFLARE WORKER"
echo "================================================="

# Check if wrangler is installed
if ! command -v wrangler &> /dev/null; then
    echo "‚ùå Error: Wrangler CLI not found. Install with: npm install -g wrangler"
    exit 1
fi

# Check if we're authenticated
echo "üîê Checking CloudFlare authentication..."
if ! wrangler whoami &> /dev/null; then
    echo "‚ùå Error: Not authenticated with CloudFlare. Run: wrangler login"
    exit 1
fi

echo "‚úÖ Authentication verified"

# Deploy to staging first for testing
echo ""
echo "üì¶ STEP 1: Deploy to STAGING for testing..."
echo "-------------------------------------------"

wrangler deploy \
  --config wrangler-author-integrated.toml \
  --env staging \
  --name books-api-proxy-author-staging

echo "‚úÖ Staging deployment complete"

# Test staging deployment
echo ""
echo "üß™ STEP 2: Testing STAGING deployment..."
echo "----------------------------------------"

STAGING_URL="https://books-api-proxy-author-staging.jukasdrj.workers.dev"

# Test health endpoint
echo "Testing health endpoint..."
if curl -s "${STAGING_URL}/health" | grep -q "author-integrated"; then
    echo "‚úÖ Health check passed - author integration detected"
else
    echo "‚ùå Health check failed"
    exit 1
fi

# Test basic search (should build author profiles)
echo "Testing search with author indexing..."
if curl -s "${STAGING_URL}/search?q=tolkien&maxResults=3" | grep -q "items"; then
    echo "‚úÖ Search test passed"
else
    echo "‚ùå Search test failed"
    exit 1
fi

echo "‚úÖ All staging tests passed"

# Deploy to production
echo ""
echo "üåü STEP 3: Deploy to PRODUCTION..."
echo "----------------------------------"

read -p "Deploy to production? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Deploying to production..."
    
    wrangler deploy \
      --config wrangler-author-integrated.toml \
      --env production \
      --name books-api-proxy
    
    echo "‚úÖ Production deployment complete!"
    
    # Test production
    echo ""
    echo "üß™ Testing PRODUCTION deployment..."
    echo "-----------------------------------"
    
    PROD_URL="https://books-api-proxy.jukasdrj.workers.dev"
    
    echo "Testing production health endpoint..."
    if curl -s "${PROD_URL}/health" | grep -q "author-integrated"; then
        echo "‚úÖ Production health check passed"
    else
        echo "‚ùå Production health check failed"
        exit 1
    fi
    
    echo ""
    echo "üéâ DEPLOYMENT COMPLETE!"
    echo "======================="
    echo "Production URL: ${PROD_URL}"
    echo ""
    echo "üìä NEW ENDPOINTS AVAILABLE:"
    echo "‚Ä¢ ${PROD_URL}/search - Enhanced with author profiles"
    echo "‚Ä¢ ${PROD_URL}/isbn - Enhanced with cultural data"
    echo "‚Ä¢ ${PROD_URL}/authors/search - Search authors by culture"
    echo "‚Ä¢ ${PROD_URL}/authors/profile?name=AuthorName - Get author profile"
    echo "‚Ä¢ ${PROD_URL}/authors/cultural-stats - Get diversity statistics"
    echo "‚Ä¢ ${PROD_URL}/authors/propagate?author=Name - Trigger data propagation"
    echo ""
    echo "üî• FEATURES IMPLEMENTED:"
    echo "‚úÖ Task 8: Author Indexing Service"
    echo "‚úÖ Task 9: Cultural Data Propagation"
    echo "‚úÖ Multi-tier caching (KV + R2)"
    echo "‚úÖ Author profile building from search results"
    echo "‚úÖ Cultural metadata enrichment"
    echo "‚úÖ Author-based cultural search"
    echo ""
    
else
    echo "Production deployment cancelled."
    echo "Staging available at: ${STAGING_URL}"
fi

echo ""
echo "üßπ CLEANUP: Remove staging worker? (y/N): "
read -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    wrangler delete books-api-proxy-author-staging --force
    echo "‚úÖ Staging worker removed"
fi

echo ""
echo "üéØ NEXT STEPS:"
echo "‚Ä¢ Update iOS BookSearchService to use new cultural metadata"
echo "‚Ä¢ Test author profile features in production"
echo "‚Ä¢ Monitor CloudFlare analytics for performance"
echo "‚Ä¢ Consider implementing author deduplication maintenance"